//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define BASE 0
#define MATH 1
#define SYMB 2
#define ADJU  3

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        l_br {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
            layers = <1>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <26 27>;
            layers = <1>;
        };

        l_sq_br {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <5 6>;
            layers = <1>;
        };

        r_br {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <18 19>;
            layers = <1>;
        };

        f_for {
            bindings = <&kp F4>;
            key-positions = <9 9 19>;
        };

        r_sq_br {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <9 8>;
            layers = <1>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        td_dots: td_dots {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DOTS";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT>, <&kp SEMICOLON>, <&kp LS(SEMICOLON)>;
        };

        td_sm: td_sm {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SM";
            #binding-cells = <0>;
            bindings = <&kp K_MUTE>, <&kp LC(LS(A))>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "BASE";
            bindings = <
                 &kp Q        &kp W        &kp E         &kp R         &kp T          &kp Y      &kp U            &kp I         &kp O        &kp P
                 &hrm LGUI A  &hrm LALT S  &hrm LCTRL D  &hrm LSHFT F  &kp G          &kp H      &hrm RSHFT J     &hrm RCTRL K  &hrm RALT L  &hrm RGUI SEMICOLON
&kh_hs_tapdance  &kp Z        &kp X        &kp C         &kp V         &kp B          &kp N      &kp M            &kp COMMA     &kp DOT      &kp FSLH             &kp SQT
                                           &lt 4 TAB     &lt 1 SPACE   &lt 2 ENTER    &lt 3 ESC  &lt 1 BACKSPACE  &lt 4 DELETE
            >;
        };

        math {
            label = "MATH";
            bindings = <
        &trans        &trans        &trans            &trans          &trans    &kp KP_MINUS     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_SLASH
        &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans    &kp KP_PLUS      &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MULTIPLY
&trans  &trans        &trans        &trans            &trans          &trans    &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &td_dots         &kp EQUAL
                                    &trans            &trans          &trans    &trans           &trans           &trans
            >;
        };

        navi {
            bindings = <
       &kp CAPSLOCK  &none            &none            &none           &none     &kp C_VOLUME_UP    &kp HOME          &kp PAGE_DOWN     &kp PG_UP             &kp END
       &kp LGUI      &kp LALT         &kp LCTRL        &kp LEFT_SHIFT  &none     &td_sm             &kp LEFT_ARROW    &kp DOWN          &kp UP_ARROW          &kp RIGHT
&none  &none         &kp PRINTSCREEN  &kp PAUSE_BREAK  &none           &none     &kp C_VOLUME_DOWN  &kp LC(LS(LEFT))  &kp LC(LS(DOWN))  &kp LC(LS(UP_ARROW))  &kp LC(LS(RIGHT))  &trans
                                      &trans           &trans          &trans    &trans             &trans            &trans
            >;
        };

        symb {
            label = "SYMB";
            bindings = <
           &kp LEFT_BRACKET       &kp AMPERSAND    &kp ASTRK    &kp LPAR   &kp RIGHT_BRACKET    &trans  &trans     &trans     &trans    &trans
           &kp RIGHT_PARENTHESIS  &kp DOLLAR       &kp PERCENT  &kp CARET  &kp BACKSLASH        &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&kp GRAVE  &kp LEFT_BRACE         &kp EXCLAMATION  &kp AT_SIGN  &kp HASH   &kp RIGHT_BRACE      &trans  &trans     &trans     &trans    &trans    &trans
                                                   &trans       &trans     &trans               &trans  &trans     &trans
            >;
        };

        func {
            label = "ADJU";
            bindings = <
        &kp F12  &kp F7  &kp F8  &kp F9  &trans    &bt BT_CLR  &bt BT_NXT  &bt BT_PRV  &out OUT_TOG  &trans
        &kp F11  &kp F4  &kp F5  &kp F6  &trans    &trans      &kp RSHIFT  &kp RCTRL   &kp RALT      &kp RGUI
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans    &trans      &trans      &trans      &trans        &trans    &trans
                         &trans  &trans  &trans    &trans      &trans      &trans
            >;
        };
    };
};
